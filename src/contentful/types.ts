// types generated by https://github.com/marcolink/cf-content-types-generator-app

import type { ChainModifiers, Entry, EntryFieldTypes, EntrySkeletonType, LocaleCode } from "contentful";

export interface TypeCitationFields {
    text: EntryFieldTypes.Symbol;
    name: EntryFieldTypes.Symbol;
    city: EntryFieldTypes.Symbol;
}

export type TypeCitationSkeleton = EntrySkeletonType<TypeCitationFields, "citation">;
export type TypeCitation<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeCitationSkeleton, Modifiers, Locales>;

export interface TypeConnectionFields {
    title: EntryFieldTypes.Symbol;
    url: EntryFieldTypes.Symbol;
    type?: EntryFieldTypes.Symbol<"Email" | "Facebook" | "Instagram" | "Other" | "Phone" | "Tiktok" | "Youtube">;
}

export type TypeConnectionSkeleton = EntrySkeletonType<TypeConnectionFields, "connection">;
export type TypeConnection<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeConnectionSkeleton, Modifiers, Locales>;

export interface TypeContactFields {
    title: EntryFieldTypes.Symbol;
    connections?: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeConnectionSkeleton>>;
}

export type TypeContactSkeleton = EntrySkeletonType<TypeContactFields, "contact">;
export type TypeContact<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeContactSkeleton, Modifiers, Locales>;

export interface TypeHomepageFields {
    name?: EntryFieldTypes.Symbol;
    cover: EntryFieldTypes.AssetLink;
    citations: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeCitationSkeleton>>;
}

export type TypeHomepageSkeleton = EntrySkeletonType<TypeHomepageFields, "homepage">;
export type TypeHomepage<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeHomepageSkeleton, Modifiers, Locales>;

export interface TypeLinkFields {
    text: EntryFieldTypes.Symbol;
    slug?: EntryFieldTypes.Symbol;
    page: EntryFieldTypes.EntryLink<TypeHomepageSkeleton | TypePageSkeleton | TypeShopSkeleton>;
}

export type TypeLinkSkeleton = EntrySkeletonType<TypeLinkFields, "link">;
export type TypeLink<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeLinkSkeleton, Modifiers, Locales>;

export interface TypeLogoFields {
    name: EntryFieldTypes.Symbol;
    image: EntryFieldTypes.AssetLink;
}

export type TypeLogoSkeleton = EntrySkeletonType<TypeLogoFields, "logo">;
export type TypeLogo<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeLogoSkeleton, Modifiers, Locales>;

export interface TypePageFields {
    title: EntryFieldTypes.Symbol;
    sections: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeSectionSkeleton>>;
}

export type TypePageSkeleton = EntrySkeletonType<TypePageFields, "page">;
export type TypePage<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypePageSkeleton, Modifiers, Locales>;

export interface TypeProductFields {
    title: EntryFieldTypes.Symbol;
    price: EntryFieldTypes.Integer;
    details: EntryFieldTypes.Array<EntryFieldTypes.Symbol>;
}

export type TypeProductSkeleton = EntrySkeletonType<TypeProductFields, "product">;
export type TypeProduct<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeProductSkeleton, Modifiers, Locales>;

export interface TypeSectionFields {
    image: EntryFieldTypes.AssetLink;
    title: EntryFieldTypes.Symbol;
    text: EntryFieldTypes.Text;
}

export type TypeSectionSkeleton = EntrySkeletonType<TypeSectionFields, "section">;
export type TypeSection<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeSectionSkeleton, Modifiers, Locales>;

export interface TypeShopFields {
    title: EntryFieldTypes.Symbol;
    products: EntryFieldTypes.Array<EntryFieldTypes.EntryLink<TypeProductSkeleton>>;
}

export type TypeShopSkeleton = EntrySkeletonType<TypeShopFields, "shop">;
export type TypeShop<Modifiers extends ChainModifiers, Locales extends LocaleCode> = Entry<TypeShopSkeleton, Modifiers, Locales>;
